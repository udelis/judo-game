const { Telegraf } = require('telegraf');
const fs = require('fs');
require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// üëá –û–¥–∏–Ω —Ä–∞–∑, –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
bot.telegram.setMyCommands([
  { command: 'join', description: '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏' },
  { command: 'attack', description: '–ê—Ç–∞–∫—É–≤–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ (reply)' },
  { command: 'log', description: '–û—Å—Ç–∞–Ω–Ω—ñ –∞—Ç–∞–∫–∏' },
  { command: 'profile', description: '–¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å' },
  { command: 'leaderboard', description: '–¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤' },
  { command: 'roles', description: '–ó–∞—Å—ñ–¥–∞–Ω–Ω—è –§–î–£ (—Ä–∞–∑ –Ω–∞ –¥–æ–±—É)' },
  { command: 'help', description: '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' },
  { command: 'president', description: '–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–ª—ñ: –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç' },
  { command: 'trainer', description: '–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–ª—ñ: —Ç—Ä–µ–Ω–µ—Ä' },
  { command: 'medic', description: '–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–ª—ñ: –º–µ–¥—Å–µ—Å—Ç—Ä–∞' },
  { command: 'laptiev', description: '–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–ª—ñ: –ª–∞–ø—Ç—î–≤' },
  { command: 'judge', description: '–ö–æ–º–∞–Ω–¥–∞ —Ä–æ–ª—ñ: —Å—É–¥–¥—è' }
]);

// ======== DATA INIT =========
const DATA_FILE = 'data.json';

let data = { chats: {} };
if (fs.existsSync(DATA_FILE)) {
  try {
    const parsed = JSON.parse(fs.readFileSync(DATA_FILE));
    data = { chats: {}, ...parsed };
    if (!data.chats) data.chats = {};
  } catch (err) {
    console.error('‚ùå Error parsing data.json:', err);
  }
}

function save() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

function getChatData(chatId) {
  if (!data.chats) data.chats = {};
  if (!data.chats[chatId]) {
    data.chats[chatId] = {
      players: {},
      lastRoleDistribution: null,
      logs: []
    };
  }
  return data.chats[chatId];
}
// =============================

function logAttack(chatData, attacker, target, score, result) {
  const logEntry = {
    time: new Date().toLocaleString('uk-UA'),
    attacker: attacker.username || attacker.first_name,
    target: target.username || target.first_name,
    score,
    result
  };
  chatData.logs.unshift(logEntry);
  chatData.logs = chatData.logs.slice(0, 20);
  save();
}

const results = {
  10: ['–Ü–ø–ø–æ–Ω –∫–∏–¥–∫–æ–º', '–Ü–ø–ø–æ–Ω –±–æ–ª—å–æ–≤–∏–º!', '–Ü–ø–ø–æ–Ω –∑–∞–¥—É—à–ª–∏–≤–∏–º', '–°—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–≤ –•–∞–Ω—Å–æ–∫—É-–º–∞–∫–µ'],
  5: ['–í–∞–∑–∞-–∞—Ä—ñ'],
  1: ['–Æ–∫–æ'],
  0: ['–°—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–≤—ñ–≤ –∫–æ–Ω—Ç—Ä–ø—Ä–∏–π–æ–º!', '–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –•–∞–Ω—Å–æ–∫—É-–º–∞–∫–µ', '–í–∞—Å –¥–∏—Å–∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ –∑–∞ –Ω–µ—Å–ø–æ—Ä—Ç–∏–≤–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É', '–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ç—Ä–∞–≤–º—É']
};

const getToday = () => new Date().toISOString().split('T')[0];

function getTitle(score) {
  if (score >= 250) return '–ú–°–ú–ö';
  if (score >= 100) return '–ú–°';
  if (score >= 50) return '–ö–ú–°';
  return null;
}

// ==================== GAME =========================

bot.hears(/^\/join(@\w+)?$/, (ctx) => {
  const chatData = getChatData(ctx.chat.id);
  const userId = ctx.from.id;

  if (!chatData.players[userId]) {
    chatData.players[userId] = {
      name: ctx.from.first_name,
      score: 0,
      achievements: { world: 0, olympic: 0, ukraine: 0 },
      lastAttack: null,
      lastRoleAction: null,
      role: null
    };
    save();
    ctx.reply(`${ctx.from.first_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!`);
  } else {
    ctx.reply(`–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ, ${ctx.from.first_name}!`);
  }
});

bot.hears(/^\/attack(@\w+)?$/, (ctx) => {
  const chatData = getChatData(ctx.chat.id);
  const attacker = ctx.from;
  const attackerData = chatData.players[attacker.id];
  const reply = ctx.message.reply_to_message;

  if (!attackerData) return ctx.reply('–¢–∏ —â–µ –Ω–µ –≤ –≥—Ä—ñ. –ù–∞–ø–∏—à–∏ /join');
  if (!reply) return ctx.reply('–ê—Ç–∞–∫—É –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –ª–∏—à–µ —è–∫ reply.');
  if (reply.from.id === attacker.id) return ctx.reply('–°–∞–º–æ–∞—Ç–∞–∫–∞ –Ω–µ–º–æ–∂–ª–∏–≤–∞ ü§ï');
  if (!chatData.players[reply.from.id]) return ctx.reply('–°—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —â–µ –Ω–µ –≤ –≥—Ä—ñ.');

  const today = getToday();
  if (attackerData.lastAttack === today) return ctx.reply('–¢–∏ –≤–∂–µ –∞—Ç–∞–∫—É–≤–∞–≤ —Å—å–æ–≥–æ–¥–Ω—ñ!');

  const score = [0, 1, 5, 10][Math.floor(Math.random() * 4)];
  const resultText = results[score][Math.floor(Math.random() * results[score].length)];

  attackerData.score += score;
  attackerData.lastAttack = today;

  const title = getTitle(attackerData.score);
  if (title) attackerData.title = title;

  const weekday = new Date().getDay();
  if (score === 10) {
    if (weekday === 3) attackerData.achievements.ukraine++;
    if (weekday === 6) attackerData.achievements.world++;
    if (weekday === 0) attackerData.achievements.olympic++;
  }

  save();
  logAttack(chatData, attacker, reply.from, score, resultText);

  ctx.reply(`üí• ${attacker.first_name} –∞—Ç–∞–∫—É–≤–∞–≤ ${reply.from.first_name}!\nüéØ ${resultText}\n+${score} –±–∞–ª—ñ–≤. –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${attackerData.score}`);
});

bot.hears(/^\/profile(@\w+)?$/, (ctx) => {
  const chatData = getChatData(ctx.chat.id);
  const player = chatData.players[ctx.from.id];
  if (!player) return ctx.reply('–¢–∏ —â–µ –Ω–µ –≤ –≥—Ä—ñ. –ù–∞–ø–∏—à–∏ /join');

  const a = player.achievements;
  ctx.reply(`üë§ ${player.name}
üéØ –ë–∞–ª–∏: ${player.score}
${player.title ? `ü•ã –ó–≤–∞–Ω–Ω—è: ${player.title}\n` : ''}${player.role ? `üé≠ –†–æ–ª—å: ${player.role}\n` : ''}

üèÖ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:
- –ß–µ–º–ø—ñ–æ–Ω –£–∫—Ä–∞—ó–Ω–∏: ${a.ukraine}
- –ß–µ–º–ø—ñ–æ–Ω –°–≤—ñ—Ç—É: ${a.world}
- –û–ª—ñ–º–ø—ñ–π—Å—å–∫–∏–π —á–µ–º–ø—ñ–æ–Ω: ${a.olympic}`);
});

bot.hears(/^\/leaderboard(@\w+)?$/, (ctx) => {
  const chatData = getChatData(ctx.chat.id);
  const sorted = Object.entries(chatData.players).sort(([, a], [, b]) => b.score - a.score).slice(0, 5);

  if (!sorted.length) return ctx.reply('–ü–æ–∫–∏ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤.');
  let msg = `üèÜ –¢–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤:\n\n`;
  sorted.forEach(([id, p], i) => {
    msg += `${i + 1}. ${p.name} ‚Äî ${p.score} –±–∞–ª—ñ–≤\n`;
  });
  ctx.reply(msg);
});

bot.hears(/^\/log(@\w+)?$/, (ctx) => {
  const chatData = getChatData(ctx.chat.id);
  if (!chatData.logs.length) return ctx.reply('–©–µ –Ω–µ –±—É–ª–æ –∂–æ–¥–Ω–æ—ó –∞—Ç–∞–∫–∏.');

  const messages = chatData.logs.slice(0, 5).map((log, i) =>
    `#${i + 1} ‚Äî ${log.attacker} ‚Üí ${log.target}\nüéØ ${log.result} (${log.score} –±–∞–ª—ñ–≤)\nüïì ${log.time}`
  );
  ctx.reply(messages.join('\n\n'));
});

bot.hears(/^\/roles(@\w+)?$/, (ctx) => {
  const chatData = getChatData(ctx.chat.id);
  const today = getToday();

  if (chatData.lastRoleDistribution === today) {
    return ctx.reply('–ó–∞—Å—ñ–¥–∞–Ω–Ω—è –§–î–£ –≤–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å —Å—å–æ–≥–æ–¥–Ω—ñ.');
  }

  const eligible = Object.entries(chatData.players).map(([id, p]) => ({ id, name: p.name }));
  if (eligible.length < 2) return ctx.reply('–ü–æ—Ç—Ä—ñ–±–Ω–æ ‚â•2 —É—á–∞—Å–Ω–∏–∫–∏.');

  Object.values(chatData.players).forEach(p => p.role = null);

  const roles = ['–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –§–î–£', '–¢—Ä–µ–Ω–µ—Ä', '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', '–õ–∞–ø—Ç—î–≤', '–°—É–¥–¥—è'];
  const shuffled = eligible.sort(() => 0.5 - Math.random());
  const assigned = shuffled.slice(0, roles.length);

  let result = 'üé≤ –†–æ–∑–ø–æ–¥—ñ–ª —Ä–æ–ª–µ–π –§–î–£ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n';
  assigned.forEach((p, i) => {
    chatData.players[p.id].role = roles[i];
    result += `üë§ ${p.name} ‚Üí ${roles[i]}\n`;
  });

  chatData.lastRoleDistribution = today;
  save();
  ctx.reply(result);
});

function createRoleCommand(command, requiredRole, emojiReply) {
  bot.hears(new RegExp(`^/${command}(@\\w+)?$`), (ctx) => {
    const chatData = getChatData(ctx.chat.id);
    const player = chatData.players[ctx.from.id];
    const reply = ctx.message.reply_to_message;

    if (!player) return ctx.reply('–¢–∏ —â–µ –Ω–µ –≤ –≥—Ä—ñ. –ù–∞–ø–∏—à–∏ /join');
    if (player.role !== requiredRole) return ctx.reply(`–¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ –ª–∏—à–µ ${requiredRole}.`);
    if (!reply) return ctx.reply('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É —è–∫ reply.');

    const today = getToday();
    if (player.lastRoleAction === today) return ctx.reply('–¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ —Å–≤–æ—é —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ.');

    player.lastRoleAction = today;
    save();
    ctx.reply(emojiReply);
  });
}

createRoleCommand('president', '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –§–î–£', '‚úåüèªüíµü•ã');
createRoleCommand('trainer', '–¢—Ä–µ–Ω–µ—Ä', 'üèãÔ∏è‚Äç‚ôÇÔ∏èüèÉ‚Äç‚ôÇÔ∏èü§¨');
createRoleCommand('medic', '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', 'üë©‚Äç‚öïÔ∏èüíâü©º');
createRoleCommand('laptiev', '–õ–∞–ø—Ç—î–≤', 'üì∏');
createRoleCommand('judge', '–°—É–¥–¥—è', 'üíªüèÜüôã‚Äç‚ôÇÔ∏è');

bot.hears(/^\/help(@\w+)?$/, (ctx) => {
  ctx.reply(`üéÆ –ö–æ–º–∞–Ω–¥–∏ –≥—Ä–∏:

/join ‚Äî –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä–∏
/attack ‚Äî –∞—Ç–∞–∫—É–≤–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ (–≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é –Ω–∞ –π–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç)
/log ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ –∞—Ç–∞–∫–∏
/profile ‚Äî —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å
/leaderboard ‚Äî —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤
/roles ‚Äî –ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞—Å—ñ–¥–∞–Ω–Ω—è –§–î–£ (—Ä–∞–∑ –Ω–∞ –¥–æ–±—É)

üßë‚Äç‚öñÔ∏è –ö–æ–º–∞–Ω–¥–∏ —Ä–æ–ª–µ–π (reply):
/president ‚Äî –∑–∞–ø–ª–∞—Ç–∏—Ç–∏ –ø—Ä–µ–º—ñ—é
/trainer ‚Äî –¥–∞—Ç–∏ –Ω–∞—Å—Ç–∞–Ω–æ–≤–∏
/medic ‚Äî –ø–æ–ª—ñ–∫—É–≤–∞—Ç–∏ —Ç—Ä–∞–≤–º—É
/laptiev ‚Äî —Å—Ñ–æ—Ç–æ—Ç–æ–≥—Ä–∞—Ñ—É–≤–∞—Ç–∏
/judge ‚Äî –æ—Ü—ñ–Ω–∏—Ç–∏ —Å—É—Ç–∏—á–∫—É

üìÖ 1 –∞—Ç–∞–∫–∞ –Ω–∞ –¥–æ–±—É
ü•ã –ó–≤–∞–Ω–Ω—è –∑–∞ –∑–Ω–∞—á–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–≥: –ö–ú–° / –ú–° / –ú–°–ú–ö
üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞: –Ü–ø–ø–æ–Ω –≤ —Å–µ—Ä–µ–¥—É, —Å—É–±–æ—Ç—É, –Ω–µ–¥—ñ–ª—é`);
});

// ====================== ERRORS ========================
bot.catch((err, ctx) => {
  console.error('‚ùå Unhandled error while processing update', err);
  ctx.reply('‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
});

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ');
